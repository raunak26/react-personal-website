{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.links = [];\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n    } else {\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value - rollOpt.darken.value\n          };\n        } else if (rollOpt.enlighten.enable) {\n          this.backColor = {\n            h: this.color.h.value,\n            s: this.color.s.value,\n            l: this.color.l.value + rollOpt.darken.value\n          };\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(this.container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = this.container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    const imageShape = this.loadImageShape(container, drawer);\n\n    if (imageShape) {\n      this.image = imageShape.image;\n      this.fill = imageShape.fill;\n      this.close = imageShape.close;\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n    this.updater = new Updater_1.Updater(container, this);\n    this.mover = new Mover_1.Mover(container, this);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n  }\n\n  move(delta) {\n    this.mover.move(delta);\n  }\n\n  update(delta) {\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return this.position.add(this.offset);\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n      return this.backColor;\n    }\n\n    return Utils_1.getHslFromAnimation(this.color);\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.links = [];\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (colorAnimation.sync) {\n        return;\n      }\n\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadImageShape(container, drawer) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n      return;\n    }\n\n    const imageDrawer = drawer;\n    const images = imageDrawer.getImages(container).images;\n    const imageData = this.shapeData;\n    const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n    const color = this.getFillColor();\n    let imageRes;\n\n    if (!image) {\n      return;\n    }\n\n    if (image.svgData !== undefined && imageData.replaceColor && color) {\n      const svgColoredData = Utils_1.replaceColorSvg(image, color, this.opacity.value);\n      const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      });\n      const domUrl = URL || window.URL || window.webkitURL || window;\n      const url = domUrl.createObjectURL(svg);\n      const img = new Image();\n      imageRes = {\n        data: Object.assign(Object.assign({}, image), {\n          svgData: svgColoredData\n        }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n        source: imageData.src\n      };\n      img.addEventListener(\"load\", () => {\n        if (this.image) {\n          this.image.loaded = true;\n          image.element = img;\n        }\n\n        domUrl.revokeObjectURL(url);\n      });\n      img.addEventListener(\"error\", () => {\n        domUrl.revokeObjectURL(url);\n        Utils_1.loadImage(imageData.src).then(img2 => {\n          if (this.image && img2) {\n            image.element = img2.element;\n            this.image.loaded = true;\n          }\n        });\n      });\n      img.src = url;\n    } else {\n      imageRes = {\n        data: image,\n        loaded: true,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src\n      };\n    }\n\n    if (!imageRes.ratio) {\n      imageRes.ratio = 1;\n    }\n\n    const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n    const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n    return {\n      image: imageRes,\n      fill,\n      close\n    };\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","ParticlesOptions_1","Shape_1","Enums_1","Utils_1","Mover_1","Vector_1","Vector3d_1","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","hslColor","colorToHsl","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","life","loadLife","spawning","shadowColor","colorToRgb","shadow","updater","Updater","mover","Mover","particleInit","delta","update","draw","canvas","drawParticle","getPosition","add","getRadius","radius","getMass","pow","getHslFromAnimation","getStrokeColor","destroy","override","plugin","plugins","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","count","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","Vector3d","create","x","y","canvasSize","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","getDistance","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","angle","radOffset","range","left","right","straight","length","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","assign","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2","lifeOptions","delayTime","duration","time"],"sources":["/Users/raunakanand/Documents/GitHub/react-personal-website/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Mover_1 = require(\"./Particle/Mover\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.links = [];\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n                }\n            }\n        }\n        else {\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.getRangeMin(sizeRange);\n            this.size.max = Utils_1.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value - rollOpt.darken.value,\n                    };\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.backColor = {\n                        h: this.color.h.value,\n                        s: this.color.s.value,\n                        l: this.color.l.value + rollOpt.darken.value,\n                    };\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(this.container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = this.container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        const imageShape = this.loadImageShape(container, drawer);\n        if (imageShape) {\n            this.image = imageShape.image;\n            this.fill = imageShape.fill;\n            this.close = imageShape.close;\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        this.updater = new Updater_1.Updater(container, this);\n        this.mover = new Mover_1.Mover(container, this);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n    }\n    move(delta) {\n        this.mover.move(delta);\n    }\n    update(delta) {\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        this.container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return this.position.add(this.offset);\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        if (this.backColor && Math.floor(this.rollAngle / (Math.PI / 2)) % 2) {\n            return this.backColor;\n        }\n        return Utils_1.getHslFromAnimation(this.color);\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.links = [];\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadImageShape(container, drawer) {\n        var _a, _b, _c, _d, _e;\n        if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n            return;\n        }\n        const imageDrawer = drawer;\n        const images = imageDrawer.getImages(container).images;\n        const imageData = this.shapeData;\n        const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n        const color = this.getFillColor();\n        let imageRes;\n        if (!image) {\n            return;\n        }\n        if (image.svgData !== undefined && imageData.replaceColor && color) {\n            const svgColoredData = Utils_1.replaceColorSvg(image, color, this.opacity.value);\n            const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n            const domUrl = URL || window.URL || window.webkitURL || window;\n            const url = domUrl.createObjectURL(svg);\n            const img = new Image();\n            imageRes = {\n                data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n                loaded: false,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                source: imageData.src,\n            };\n            img.addEventListener(\"load\", () => {\n                if (this.image) {\n                    this.image.loaded = true;\n                    image.element = img;\n                }\n                domUrl.revokeObjectURL(url);\n            });\n            img.addEventListener(\"error\", () => {\n                domUrl.revokeObjectURL(url);\n                Utils_1.loadImage(imageData.src).then((img2) => {\n                    if (this.image && img2) {\n                        image.element = img2.element;\n                        this.image.loaded = true;\n                    }\n                });\n            });\n            img.src = url;\n        }\n        else {\n            imageRes = {\n                data: image,\n                loaded: true,\n                ratio: imageData.width / imageData.height,\n                replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                source: imageData.src,\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n        const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n        return {\n            image: imageRes,\n            fill,\n            close,\n        };\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}